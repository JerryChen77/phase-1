** 掌握今天笔记和代码中的所有内容 **

1、Java是否需要开发人员回收内存垃圾吗？                             ―――――――当系统认为内存不足时会调用垃圾回收器GC自动清理垃圾内存，也可手动调用
2、一个java类中包含哪些内容，编写代码在一个类中展示并创建实例使用
3、Object类常用方法有哪些，在代码中展示并创建对象演示	
4、java中有没有指针？                                      ―――――――――――――无（或者视为功能受限的指针）

5、假设把实例化的数组的变量当成方法参数， 		―――――――无变化
	当方法执行的时候改变了数组内的元素，
	那么在方法外，数组元素有发生改变吗，编写代码验证


6、构造方法能不能重写？能不能重载？构造方法能不能显式调用？――――――构造方法不能重写，能重载，不能显式调用
7、成员内部类与静态内部类的区别？			―――――――成员内部类不能定义静态属性、方法，可以访问外部类所有属性、方法，实例化需要借助外部类实例化
						  	          静态内部类可以定义静态属性、方法，只能访问外部类静态属性、方法，不需要借助外部类实例化
							          
							          
8、接口有什么特点？接口与抽象类有什么区别？		―――――――接口用interface定义的特殊抽象类，只能包含公开静态常量和公开抽象方法
							          抽象类可以包含普通类的方法、属性、构造、代码块、抽象方法等，接口只能包含公开静态常量和公开抽象方法


9、编写代码验证String和StringBuffer在增删改查上的效率	
	―――――――――――――――――――――――――――― String既属于引用类型也属于基础数据类型，而且内容是静态的，在通常情况效率高些   
  							        但如果涉及到连接字符串的时候，对于String每次连接都要重新分配内存，因此StringBuffer好些   
  							        总之，对于静态处理，如：储存字符串，用String   
  							        动态改变字符串内容则使用StringBuffer

说StringBuffer比String高是指在进行字符串相加操作的时候，尤其是大量拼接字符串的时候。
类似
String s = "";
StringBuffer b = new StringBuffer();
for(int i = 0; i < len; i++) {
  s += i;
  b.append(i);
}

这样的代码，b.append的效率远远比String相加快得多，这是因为append不需要每次都复制一次原来字符串的值。

如果你的StringBuffer不需要在多线程中共享使用，应该使用StringBuilder，这个线程不安全，但是更高效